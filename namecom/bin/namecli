#!/usr/bin/env python
# coding: utf-8
"""
    cli.py
    ~~~~~~~~~~

"""
import os
import sys

import click
import requests

from namecom import Name


@click.group()
def cli():
    pass


def get_namecom_client(name, token):
    if not name or not token:
        name = os.environ.get("NAMECOM_NAME", None)
        token = os.environ.get("NAMECOM_TOKEN", None)

    if not name or not token:
        click.echo("name or token are missing", err=True)
        sys.exit(1)

    return Name(name, token)


@cli.command()
@click.option("--domain", help="domain name like example.org", required=True)
@click.option("--host", help="host like www, www1", required=True)
@click.option("--dns-type", help="DNS record type, like A, cname", required=True)
@click.option("--answer", help="127.0.0.1, example.org, etc", required=True)
@click.option("--name", help="name for name.com", default="", required=False)
@click.option("--token", help="token for name.com", default="", required=False)
def create_dns(domain, host, dns_type, answer, name, token):
    client = get_namecom_client(name, token)
    existing_records = client.list_records_for_host(domain, host)

    if len(existing_records) == 1:
        record = existing_records[0]
        if record["type"] == dns_type and record["answer"] == answer:
            click.echo("We have found an identical record, exit")
            return
        else:
            # update existing record
            click.echo("Updating existing record")
            client.update_record(domain, record["id"], host, dns_type, answer)
            click.echo("Done")
            return

    # delete existing records and create new
    for record in existing_records:
        click.echo("Deleting Record {}".format(record))
        client.delete_record(domain, record["id"])
    click.echo("Creating new...")
    data = client.create_record(domain, host, dns_type, answer)
    click.echo("Done {}".format(data))


@cli.command()
@click.option("--domain", help="domain name like example.org", required=True)
@click.option("--host", help="host like www, www1", required=True)
@click.option("--name", help="name for name.com", default="", required=False)
@click.option("--token", help="token for name.com", default="", required=False)
def delete_dns(domain, host, name, token):
    client = get_namecom_client(name, token)
    existing_records = client.list_records_for_host(domain, host)

    for record in existing_records:
        client.delete_record(domain, record["id"])


@cli.command()
@click.option("--domain", required=True, help="domain name like example.org")
@click.option("--host", required=True, help="host like www, www1")
@click.option("--name", help="name for name.com", default="", required=False)
@click.option("--token", help="token for name.com", default="", required=False)
def ddns(domain=None, host=None, name=None, token=None):
    """Set name.com dns record to public IP."""
    ip = requests.get('https://api.ipify.org', timeout=10).text
    client = get_namecom_client(name, token)

    click.echo("current IP: {}".format(ip))
    existing_records = client.list_records_for_host(domain, host)
    if len(existing_records) == 0:
        click.echo("record not found, creating new..")
        client.create_record(domain, host, "A", ip)
        click.echo("done")
    elif len(existing_records) >= 2:
        click.echo("found multipile records for {}.{}, quit".format(host, domain))
        sys.exit(1)
    else:
        record = existing_records[0]
        # keep existing record
        if record["type"] == "A" and record["answer"] == ip:
            click.echo("We have found the same record, quit")
        else:
            # update existing record
            click.echo("update existing record")
            client.update_record(domain, record["id"], host, "A", ip)
            click.echo("{}.{} => {} done".format(host, domain, ip))


if __name__ == "__main__":
    cli()
